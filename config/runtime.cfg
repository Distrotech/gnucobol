# GNU Cobol runtime configuration
#
# Copyright (C) 2015 Simon Sobisch
#
# This file is part of the GNU Cobol runtime.
#
# The GNU Cobol runtime is free software: you can redistribute it
# and/or modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# GNU Cobol is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with GNU Cobol.  If not, see <http://www.gnu.org/licenses/>.

#
## General instructions
#

# The initial runtime.cfg file is found in the installdir/gnu-cobol/config
# or the environment variable COB_RUNTIME_CONFIG may define which runtime
# configuration file to read.

# If settings are included in the runtime environment file multiple times
# then the last setting value is used. 

# Settings via environment variables always take precedence over settings 
# that are given in runtime configuration files. And the environment is
# checked after completing processing of the rutime configuration file(s)

# Any enviroment variable may be set with the directive  set  or  setenv
# Example:  !setenv COB_LIBARAY_PATH ${LD_LIBRARY_PATH}

# All values set to string variables or environment variables are checked
# for ${envvar} and replacement is done at the time of the setting

# Any environment variable may be unset with the directive "!unset var" 
# (one var per line) can be used. Example:   !unset COB_LIBRARY_PATH
# The directives  unset  and  unsetenv  are equivalent

# Runtime configuration files can include other files, with the include directive
# Example: "!include my-runtime-configuration-file".

# To include another configuration file only if it is present use:
#    includeif runtime-configuration-file
# You can also use ${env} inside this. 
# Example:   includeif ${HOME}/mygc.cfg

# If you want to reset a parameter to its default value use:
#    reset parametername

# Most runtime variables have boolean values, some are switches, some have
# string values, integer values and some are size values.
# The boolean values will be evaluated as following:
#     to true:  1, Y, ON, YES, TRUE (no matter of case)
#     to false: 0, N, OFF
# A 'size' value is an interger optionally followed by K, M, or G for kilo, mega or giga

# For convenience a parameter in the runtime.cfg file may be defined using
# what is the environment variable name or via the parameter name. 
# In most cases the environment variable name is the parameter name (in upper case)
# with the prefix  COB_

#
## General environment
#

# Environment name: COB_DISABLE_WARNINGS
#   Parameter name: disable_warnings
#          Purpose: turn off runtime warning messages
#             Type:   boolean
#          Default:   false
#          Example:  DISABLE_WARNINGS  TRUE

# Environment name: COB_ENV_MANGLE
#   Parameter name: env_mangle
#          Purpose: names checked in the environment would get non alphanumeric change to '_'
#             Type:   boolean
#          Default:   false
#          Example:  ENV_MANGLE  TRUE

# Environment name: COB_SET_TRACE
#   Parameter name: set_trace
#          Purpose: to enable to COBOL trace feature
#             Type:   boolean
#          Default:   false
#          Example:  SET_TRACE  TRUE

# Environment name: COB_TRACE_FILE
#   Parameter name: trace_file
#          Purpose: to define where COBOL trace output should go
#             Type:   string
#          Default:   stderr
#          Example:  TRACE_FILE  ${HOME}/mytrace.log

#
## Call environment
#

# Environment name: COB_LIBRARY_PATH
#   Parameter name: library_path
#          Purpose: paths for dynamically-loadable modules
#             Type:    string
#             Note:    the default paths .:/installpath/extras are always
#                      added to the given paths
#          Example:  LIBRARY_PATH    /opt/myapp/test:/opt/myapp/production

# Environment name: COB_PRE_LOAD
#   Parameter name: pre_load
#          Purpose: modules that are loaded during startup, can be used
#                   to CALL COBOL programs or C functions that are part
#                   of a module library
#             Type:    string
#             Note: the modules listed should NOT include extensions,
#                   the runtime will use the right ones on the various platforms,
#                   COB_LIBRARY_PATH is used to locate the modules
#          Example:  PRE_LOAD      COBOL_function_library:external_c_library

# Environment name: COB_LOAD_CASE
#   Parameter name: load_case
#          Purpose: resolve ALL called program names to UPPER or LOWER case
#             Type:    Only use  UPPER  or  LOWER
#          Default: if not set program names in CALL are case sensitive
#          Example: LOAD_CASE  UPPER

# Environment name: COB_PHYSICAL_CANCEL
#  Parameter name: physical_cancel
#         Purpose: physically unload a dynamically-loadable module on CANCEL, this
#                  frees some RAM and allows the change of modules during run-time
#                  but needs more time to resolve CALLs to not-active programs
#           Alias:   default_cancel_mode (0 = yes)
#            Type:  boolean (evaluated for true only)
#          Default:   false
#          Example: PHYSICAL_CANCEL  TRUE


#
## File I/O
#

# Environment name: COB_VARSEQ_FORMAT
#   Parameter name: varseq_format
#          Purpose: declare format to be used for variable length sequential files
#             Type: 0   means 2 byte record length (big-endian) preceeds record
#                   1   means 4 byte record length (big-endian) preceeds record
#                   2   means 4 byte record length (local machine int) preceeds record
#                   3   means 2 byte record length (local machine short) preceeds record
#          Default: 0
#          Example: VARSEQ_FORMAT 1

# Environment name: COB_FILE_PATH
#   Parameter name: file_path
#          Purpose: define default location where data files are stored
#             Type: file path directory
#          Default: .  (current directory)
#          Example: FILE_PATH ${HOME}/mydata

# Environment name: COB_LS_FIXED
#   Parameter name: ls_fixed
#          Purpose: Defines if LINE SEQUENTIAL files should be fixed length (or variable)
#             Type:   boolean
#          Default:   false
#          Example: LS_FIXED TRUE

# Environment name: COB_LS_NULLS
#   Parameter name: ls_nulls
#          Purpose: Defines for LINE SEQUENTIAL files what to do with data which is not DISPLAY type
#                   This could happen if a LINE SEQUENTIAL record has COMP data fields in it
#             Type:   boolean
#          Default:   false
#             Note: The TRUE setting will handle files that contain COMP data in a similar manner
#                   to the method used by Micro Focus COBOL
#          Example: LS_NULL = TRUE

# Environment name: COB_SYNC
#   Parameter name: sync
#          Purpose: Should the file be synced to disk after ech write/update
#             Type:   boolean
#          Default:   false
#          Example: SYNC: TRUE

# Environment name: COB_SORT_MEMORY
#   Parameter name: sort_memory
#          Purpose: Defines how much RAM to assign for sorting data
#             Type:   size  but must be more than 1M
#          Default:  128M
#          Example: SORT_MEMORY 64M

# Environment name: COB_SORT_CHUNK
#   Parameter name: sort_chunk
#          Purpose: Defines how much RAM to assign for sorting data in chunks
#             Type:   size  but must be within 128K and 16M
#          Default:  256K
#          Example: SORT_CHUNK 1M

#
## Screen I/O
#

# Environment name: COB_BELL
#   Parameter name: bell
#          Purpose: Defines how a request for the screen to beep is handled
#             Type: FLASH, SPEAKER, FALSE, NONE
#          Default:  NONE
#          Example: BELL SPEAKER

# Environment name: COB_REDIRECT_DISPLAY
#   Parameter name: redirect_display
#          Purpose: Defines if DISPLAY output should be sent to 'stderr'
#             Type:  boolean
#          Default:  false
#          Example: redirect_display Yes

# Environment name: COB_SCREEN_ESC
#   Parameter name: screen_esc
#          Purpose: 
#             Type:  boolean
#          Default:  false
#          Example: screen_esc Yes

# Environment name: COB_SCREEN_EXCEPTIONS
#   Parameter name: screen_exceptions
#          Purpose: 
#             Type:  boolean
#          Default:  false
#          Example: screen_exceptions Yes

# Environment name: COB_TIMEOUT_SCALE
#   Parameter name: timeout_scale
#          Purpose: 
#             Type:  integer
#                       1 means 100, 2 means 10, 3 means 1
#          Default:  1000
#          Example: timeout_scale 3

# Environment name: COB_LEGACY
#   Parameter name: legacy
#          Purpose: 
#             Type:  boolean
#          Default:  not set
#          Example: timeout_scale 3

# Note: If you want to slightly speed up a program's startup time, remove all of the comments from
#       the actual real file that is processed
